{"name":"qLibc Project","tagline":"The goal of qLibc project is to provide a simple but powerful general purpose C/C++ library.","body":"# qLibc Project\r\n\r\n## What's qLibc?\r\n\r\nThe goal of qLibc project is to provide a **simple but powerful general purpose C/C++ library** which includes all kinds of containers and general library routines. It provides ready-made set of common container APIs with constant look that can be used with any built-in types and with any user-defined types.\r\n\r\n## qLibc Copyright\r\n\r\nAll of the deliverable code in qLibc has been dedicated to the public domain by the authors. Anyone is free to copy, modify, publish, use, compile, sell, or distribute the original qLibc code, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. \r\n\r\nAll of the deliverable code in qLibc has been written from scratch (except of MD5 code published by RSA Data Security, Inc). No code has been taken from other projects or from the open internet. Every line of code can be traced back to its original author. So the qLibc code base is clean and is not contaminated with licensed code from other projects. \r\n\r\n## API Reference\r\n\r\n* [qlibc Core API Reference](http://www.qdecoder.org/qlibc/reference/qlibc/files.html)\r\n  * Containers\r\n    * List --- Doubly Linked List.\r\n    * List Table --- KEY/VALUE paired table implemented on linked-list.\r\n    * Hash Table --- Hash based KEY/VALUE paired table.\r\n    * Static Hash Table --- Static(array/mmapped/shared) memory based KEY/VALUE paired table.\r\n    * Vector --- implements a growable array of elements.\r\n    * Queue --- FIFO(First In First Out) implementation.\r\n    * Stack --- LIFO(Last In First Out) implementation.\r\n  * General utilities.\r\n    * String\r\n    * I/O\r\n    * File\r\n    * IPC, Semaphore Shared-memory\r\n    * En/decoders\r\n    * Hashes\r\n    * System\r\n    * Time\r\n\r\n* [qLibc Extension API Reference](http://www.qdecoder.org/qlibc/reference/qlibcext/files.html)\r\n  * INI-style Configuration File Parser.\r\n  * Apache-style Configuration File Parser.\r\n  * Rotating File Logger.\r\n  * HTTP client.\r\n  * Database(MySQL) interface.\r\n\r\n## Constant Look\r\n\r\nAll container APIs have constant look, basically it provides a creator function which usually returns a pointer of a container structure. And **every functions related to the container can be accessed through function pointers inside of the container**.\r\n\r\nSo regardless of what container you use, you can simple put elements into list like pContainer->put(pContainer, ...). It looks like C++ class but it's pure C implementation. Of course it works with both of your C and C++ codes**.\r\n\r\nWe used this concept as much as possible because it simplifies the thinking way and helps to improve readability. Consequently it helps people to write bugless codes more easily.\r\n \r\nSee the example below to see how it works.\r\n\r\n```\r\n// create a hash-table with hash range 100.\r\n// Hash range does NOT mean maximum number of elements. Refer API doc.\r\nqhashtbl_t *tbl = qhashtbl(100);\r\n\r\n// add an element which key name is \"score\".\r\nint x = 12345;\r\ntbl->put(tbl, \"score\", &x, sizeof(int));\r\n\r\n// get the value of the element.\r\nint *px = tbl->get(tbl, \"score\", NULL, true);\r\nif(px != NULL) {\r\n  printf(\"%d\\n\", *px);             \r\n  free(px);\r\n}\r\n\r\n// release table\r\ntbl->free(tbl);\r\n```\r\n\r\nHere is a same implementation of above code but using Linked-List-Table container.\r\n\r\n```\r\n// create a linked-list-table.\r\nqlisttbl_t *tbl = qlisttbl();\r\n\r\n// add an element which key name is \"score\".\r\nint x = 12345;\r\ntbl->put(tbl, \"score\", &x, sizeof(int), true);\r\n\r\n// get the value of the element.\r\nint *px = tbl->get(tbl, \"score\", NULL, true);\r\nif(px != NULL) {\r\n  printf(\"%d\\n\", *px);             \r\n  free(px);\r\n}\r\n\r\n// release table\r\ntbl->free(tbl);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}