{"name":"qLibc Project","tagline":"The goal of qLibc project is to provide a simple but powerful general purpose C/C++ library.","body":"What's qLibc?\r\n=============\r\n\r\nqLibc is currently one of the most functionally-complete, publicly-licensed\r\nC/C++ libraries. The goal of the qLibc project is to provide a **simple and\r\npowerful general purpose C/C++ library** that includes all kinds of containers\r\nand general library routines. It provides a ready-made set of common container\r\nAPIs with a consistent API look.\r\n\r\n## qLibc Copyright\r\n\r\nqLibc is published under 2-clause BSD license known as Simplified BSD License.\r\nPlease refer the LICENSE document included in the package for more details.\r\n\r\n## API Reference\r\n\r\n* [qlibc Core API Reference](http://wolkykim.github.io/qlibc/doc/html/files.html)\r\n  * Containers for Key/Value pairs\r\n    * Tree Table --- in binary tree(left-leaning red-black tree) data structure.\r\n    * Hash Table --- in hash-based data structure.\r\n    * Static Hash Table --- in fixed size memory(array/mmapped/shared).\r\n    * List Table --- in (doubly) linked-list data structure.\r\n  * Containers for Objects\r\n    * List --- Doubly Linked List.\r\n    * Vector --- implements a growable array of elements.\r\n    * Queue --- FIFO(First In First Out) implementation.\r\n    * Stack --- LIFO(Last In First Out) implementation.\r\n  * General utilities.\r\n    * String --- string trimmer, modifier, replacer, case converter, pattern detectors, ...\r\n    * I/O --- non-blcking I/O, stream reader/writer, ...\r\n    * File --- file locking, file/directory hander, path correctors, ...\r\n    * IPC, Semaphore Shared-memory\r\n    * En/decoders --- Url en/decoder, Base64 en/decoder, Hex en/decoder, ...\r\n    * Hashes --- Murmur hases, FNV hases, MD5 hashes, ...\r\n    * Time --- time diff, time format converstion, ...\r\n\r\n* [qLibc Extension API Reference](http://wolkykim.github.io/qlibc/doc/html/files.html)\r\n  * Apache-style Configuration File Parser.\r\n  * INI-style Configuration File Parser.\r\n  * HTTP client.\r\n  * Rotating File Logger.\r\n  * Database(MySQL) interface.\r\n  * [Token-Bucket](http://en.wikipedia.org/wiki/Token_bucket)\r\n\r\n## qLibc Tables at a Glance\r\n\r\n| Characteristics     | Tree Table   | Hash Table   |Static Hash Table| List Table   |\r\n|:--------------------|:------------:|:------------:|:---------------:|:------------:|\r\n| Data structure      | Binary Tree  | Slot Index   | Block Array     | Linked-List  |\r\n| Search complexity   | O(log n)     | O(1) / O(n)  | O(1) / O(n)     | O(n)         |\r\n| Insert complexity   | O(log n)     | O(1) / O(n)  | O(1) / O(n)     | O(1)         |\r\n| Delete complexity   | O(log n)     | O(1) / O(n)  | O(1) / O(n)     | O(n)         |\r\n| Space complexity    | O(n)         | O(n)         | -               | O(n)         |\r\n| Space allocation    | Dynamic      | Dynamic      | Pre-allocation  | Dynamic      |\r\n| Data Stored Sorted  | Yes          | No           | No              | Yes (option) |\r\n| User comparator     | Supported    | -            | -               | Supported    |\r\n| Allow multi-keys    | No           | No           | No              | Yes (option) |\r\n| Key stored digested | No           | No           | Yes             | No           |\r\n| Search Nearest Key  | Yes          | No           | No              | No           |\r\n| Iterator support    | Yes          | Yes          | Yes             | Yes          |\r\n| Iterator visit order| min -> max   | random       | random          | insert order |\r\n| Thread-safe option  | Supported    | Suported     | No              | Supported    |\r\n| Runs on shared mem  | No           | No           | Yes             | No           |\r\n\r\n## Consistent API Look\r\n\r\nAll container APIs have a consistent look and feel. It basically provides\r\na creator function which usually returns a pointer to a container structure.\r\nAlso, **all functions related to the container can be accessed through function\r\npointers inside of the container** or traditional style direct access APIs.\r\nFor an example, \r\n\r\nSo, regardless of which container you use, you can simply put elements into\r\na list with `container->put(container, ...)` or you can call them using\r\ndirect API like qtreetbl_pub(container, ...).\r\n\r\nAn examples below illustrates how it looks like.\r\n\r\n~~~{.c}\r\n  // create a hash-table.\r\n  qhashtbl_t *tbl = qhashtbl(0, QHASHTBL_OPT_THREADSAFE);\r\n  \r\n  // add an element which key name is \"score\".\r\n  int x = 12345;\r\n  tbl->put(tbl, \"score\", &x, sizeof(int));\r\n  \r\n  // get the value of the element.\r\n  int *px = tbl->get(tbl, \"score\");\r\n  if(px != NULL) {\r\n    printf(\"%d\\n\", *px);\r\n    free(px);\r\n  }\r\n  \r\n  // release table\r\n  tbl->free(tbl);\r\n~~~\r\n\r\nHere is an identical implementation with a Linked-List-Table container.\r\nYou may notice that there aren't any code changes at all, except for 1 line\r\nin the table creation. This is why qLibc encapsulates corresponding function\r\npointers inside of the container object.\r\n\r\n~~~{.c}\r\n  // create a linked-list-table. THE ONLY LINE YOU NEED TO CHANGE.\r\n  qlisttbl_t *tbl = qlisttbl(QLISTTBL_OPT_THREADSAFE);\r\n  \r\n  // add an element which key name is \"score\".\r\n  int x = 12345;\r\n  tbl->put(tbl, \"score\", &x, sizeof(int));\r\n  \r\n  // get the value of the element.\r\n  int *px = tbl->get(tbl, \"score\");\r\n  if(px != NULL) {\r\n    printf(\"%d\\n\", *px);             \r\n    free(px);\r\n  }\r\n  \r\n  // release table\r\n  tbl->free(tbl);\r\n~~~\r\n\r\n## Looking for people to work with.\r\n\r\nWe're looking for people who want to work together to develop and improve qLibc.\r\nCurrently, we have high demands on following areas.\r\n\r\n* Automated testing\r\n* Documentation.\r\n* New feature implementation.\r\n\r\n## Contributors\r\n\r\nThe following people have helped with suggestions, ideas, code or fixing bugs:\r\n(in alphabetical order by first name)\r\n\r\n* [Anthony Tseng](https://github.com/darkdh)\r\n* Cesar\r\n* [Colin](https://github.com/colintd)\r\n* [Charles](https://github.com/Charles0429)\r\n* [Dmitry Vorobiev](https://github.com/demitsuri)\r\n* HyoSup Woo\r\n* [Keith Rosenberg](https://github.com/netpoetica)\r\n* Krishna\r\n* [Liu Zhongchao](https://github.com/haveTryTwo)\r\n* Luis Jimenez\r\n* Maik Beckmann\r\n* RQ\r\n* [Ryan Gonzalez](https://github.com/kirbyfan64)\r\n* [Seungyoung Kim](https://github.com/wolkykim)\r\n* Umesh\r\n\r\nIf we have forgotten or misspelled your name, please let us know.\r\n\r\n## Think the project is helpful?\r\n\r\nDo you think this project is helpful? Show your interests and help the project going on.\r\n[Donate to qLibc project](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=FKTZPCFXXU8PG&lc=US&item_name=qLibc%20Project&item_number=qlibc&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted)\r\n","google":"UA-8949829-3","note":"Don't delete this file! It's used internally to help with page regeneration."}